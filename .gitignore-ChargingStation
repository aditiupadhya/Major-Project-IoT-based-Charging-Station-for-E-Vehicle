/*
MP-EC-21-16(JCER)
IoT BASED CHARGING STATION FOR e-VEHICLES
Under the guidance of Prof.Chaitanya K J
Team members: Ashwin Gavi, Gouri KUlkarni, Pallavi Kalaghan, Aditi Upadhya
*/

//CHARGING STATION

#include <ArduinoJson.h>
#include <ArduinoJson.hpp>

//#include <ManagedSerialDevice.h>

#include "painlessMesh.h"

#define   MESH_PREFIX     "Mesh_username"
#define   MESH_PASSWORD   "mesh_password"
#define   MESH_PORT       5555
int count=0;
Scheduler userScheduler; 
painlessMesh  mesh;
int p1=12,p2=13,p3=14,p4=2;
int sp1=1,sp2=1,sp3=1,sp4=1;
int pp1=0,pp2=0,pp3=0,pp4=0;
void sendmsg() ;

Task taskSendmsg( TASK_SECOND * 1 , TASK_FOREVER, &sendmsg );

void sendmsg() {
    sp1=digitalRead(p1);sp2=digitalRead(p2);
      sp3=digitalRead(p3);  sp4=digitalRead(p4);

  String msg = "ST1:" ;
  msg=msg+String(count, DEC); ;
  mesh.sendBroadcast( msg );
  taskSendmsg.setInterval( random( TASK_SECOND * 1, TASK_SECOND * 5 ));
}


void receivedCallback( uint32_t from, String &msg ) {
  Serial.printf("%s\n", msg.c_str());

}

void newConnectionCallback(uint32_t nodeId) {
    Serial.printf("New Connection, nodeId = %u\n", nodeId);
}

void changedConnectionCallback() {
  Serial.printf("Changed connections\n");
}

void nodeTimeAdjustedCallback(int32_t offset) {
    Serial.printf("Adjusted time %u. Offset = %d\n", mesh.getNodeTime(),offset);
}

void setup() {
  pinMode(p1,INPUT);digitalWrite(p1,1);pp1=digitalRead(p1);
  pinMode(p2,INPUT);digitalWrite(p2,1);pp2=digitalRead(p2);
  pinMode(p3,INPUT);digitalWrite(p3,1);pp3=digitalRead(p3);
  pinMode(p4,INPUT);digitalWrite(p4,1);pp4=digitalRead(p4);
  Serial.begin(115200);
  mesh.setDebugMsgTypes( ERROR | STARTUP );  

  mesh.init( MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT );
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);

count=0;
if(pp1==0)count++;
if(pp2==0)count++;
if(pp3==0)count++;
if(pp4==0)count++;

  userScheduler.addTask( taskSendmsg );
  taskSendmsg.enable();
  
}

void loop() {
  if((sp1==0)&&(pp1==1))
  {
    pp1=sp1;
    Serial.println("point1 connnected");count++;
     Serial.println(count);
  }
  if((sp1==1)&&(pp1==0))
  {
    pp1=sp1;
    Serial.println("point1 disconnnected");count--;
    Serial.println(count);
  }
   
  if((sp2==0)&&(pp2==1))
  {
    pp2=sp2;
    Serial.println("point2 connnected");count++;
     Serial.println(count);
  }
  if((sp2==1)&&(pp2==0))
  {
    pp2=sp2;
    Serial.println("point2 disconnnected");count--;
    Serial.println(count);
  }
 
  if((sp3==0)&&(pp3==1))
  {
    pp3=sp3;
    Serial.println("point3 connnected");count++;
     Serial.println(count);
  }
  if((sp3==1)&&(pp3==0))
  {
    pp3=sp3;
    Serial.println("point3 disconnnected");count--;
    Serial.println(count);
  }
 
  if((sp4==0)&&(pp4==1))
  {
    pp4=sp4;
    Serial.println("point4 connnected");count++;
     Serial.println(count);
  }
  if((sp4==1)&&(pp4==0))
  {
    pp4=sp4;
    Serial.println("point4 disconnnected");count--;
    Serial.println(count);
  }
  mesh.update();delay(80);
}

